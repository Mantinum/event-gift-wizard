import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
};

serve(async (req) => {
  console.log('üöÄ Function started successfully');
  console.log('Request method:', req.method);
  console.log('Request URL:', req.url);
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Handling CORS preflight request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('üì• Processing request...');
    
    // Test environment variables
    const openAIKey = Deno.env.get('OPENAI_API_KEY');
    const serpApiKey = Deno.env.get('SERPAPI_API_KEY');
    
    console.log('üîë Environment check:');
    console.log('- OpenAI Key available:', !!openAIKey);
    console.log('- SerpApi Key available:', !!serpApiKey);
    
    if (!openAIKey) {
      console.log('‚ùå Missing OpenAI API key');
      return new Response(JSON.stringify({
        error: 'Configuration manquante: cl√© OpenAI non configur√©e',
        suggestions: []
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!serpApiKey) {
      console.log('‚ùå Missing SerpApi API key');
      return new Response(JSON.stringify({
        error: 'Configuration manquante: cl√© SerpApi non configur√©e',
        suggestions: []
      }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Initialize Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Parse request body
    const body = await req.json();
    const { personId, eventType, budget, additionalContext } = body;
    console.log('üìã Request data:', { personId, eventType, budget, additionalContext });

    // Fetch person data from database
    console.log('üîç Fetching person data for ID:', personId);
    const { data: personData, error: personError } = await supabase
      .from('persons')
      .select('*')
      .eq('id', personId)
      .single();

    console.log('üìä Database response - Data:', personData);
    console.log('üìä Database response - Error:', personError);

    if (personError) {
      console.error('‚ùå Database error:', personError.message, personError.code);
      return new Response(JSON.stringify({
        error: `Erreur base de donn√©es: ${personError.message}`,
        errorCode: personError.code,
        suggestions: []
      }), {
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!personData) {
      console.error('‚ùå Person not found with ID:', personId);
      return new Response(JSON.stringify({
        error: 'Personne non trouv√©e avec cet ID',
        personId: personId,
        suggestions: []
      }), {
        status: 404,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log('üë§ Person data:', personData);

    // Create intelligent prompt for OpenAI
    const prompt = `Tu es un expert en suggestions de cadeaux personnalis√©s. G√©n√®re 3 suggestions de cadeaux pour cette personne :

PROFIL DE LA PERSONNE:
- Nom: ${personData.name}
- √Çge: ${personData.age_years ? `${personData.age_years} ans` : 'Non sp√©cifi√©'}
- Genre: ${personData.gender || 'Non sp√©cifi√©'}
- Relation: ${personData.relationship || 'Non sp√©cifi√©'}
- Centres d'int√©r√™t: ${personData.interests?.join(', ') || 'Aucun sp√©cifi√©'}
- Cat√©gories pr√©f√©r√©es: ${personData.preferred_categories?.join(', ') || 'Aucune sp√©cifi√©e'}
- Notes personnelles: ${personData.notes || 'Aucune'}
- Dernier cadeau offert: ${personData.last_gift || 'Aucun'}

CONTEXTE DE L'√âV√âNEMENT:
- Type d'√©v√©nement: ${eventType}
- Budget: ${budget}‚Ç¨
- Contexte suppl√©mentaire: ${additionalContext || 'Aucun'}

INSTRUCTIONS:
1. Prends en compte l'√¢ge, les int√©r√™ts et la personnalit√©
2. Respecte le budget indiqu√©
3. √âvite de r√©p√©ter le dernier cadeau s'il est mentionn√©
4. Sois cr√©atif et personnel dans tes suggestions
5. Explique pourquoi chaque cadeau convient √† cette personne

R√©ponds uniquement avec un JSON valide contenant un tableau de 3 suggestions au format :
{
  "suggestions": [
    {
      "title": "Titre du cadeau",
      "description": "Description d√©taill√©e du cadeau et pourquoi il convient",
      "estimatedPrice": 50,
      "confidence": 0.9,
      "reasoning": "Explication d√©taill√©e du choix bas√©e sur le profil",
      "category": "cat√©gorie du cadeau",
      "alternatives": ["alternative 1", "alternative 2"],
      "purchaseLinks": []
    }
  ]
}`;

    // Call OpenAI API
    console.log('ü§ñ Calling OpenAI API...');
    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en cadeaux personnalis√©s. Tu r√©ponds UNIQUEMENT avec du JSON valide, sans texte suppl√©mentaire.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.7
      }),
    });

    if (!openAIResponse.ok) {
      console.error('‚ùå OpenAI API error:', await openAIResponse.text());
      throw new Error(`OpenAI API error: ${openAIResponse.status}`);
    }

    const openAIData = await openAIResponse.json();
    console.log('‚úÖ OpenAI response received');

    // Parse the AI response
    let suggestions = [];
    try {
      const aiContent = openAIData.choices[0].message.content.trim();
      console.log('üß† AI content:', aiContent);
      
      // Remove any markdown formatting
      const cleanContent = aiContent.replace(/```json\n?/, '').replace(/\n?```/, '');
      const parsedResponse = JSON.parse(cleanContent);
      suggestions = parsedResponse.suggestions || [];
    } catch (parseError) {
      console.error('‚ùå Error parsing AI response:', parseError);
      // Fallback suggestions
      suggestions = [
        {
          title: "Cadeau personnalis√©",
          description: `Un cadeau adapt√© pour ${personData.name} bas√© sur ses int√©r√™ts`,
          estimatedPrice: Math.min(budget * 0.8, 50),
          confidence: 0.7,
          reasoning: "Suggestion g√©n√©r√©e automatiquement en cas d'erreur d'analyse",
          category: "g√©n√©ral",
          alternatives: [],
          purchaseLinks: []
        }
      ];
    }

    console.log('üéÅ Generated suggestions:', suggestions.length);
    return new Response(JSON.stringify({
      suggestions,
      personName: personData.name,
      eventType,
      budget
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå ERROR in edge function:', error);
    console.error('Error name:', error?.name);
    console.error('Error message:', error?.message);
    console.error('Error stack:', error?.stack);
    
    return new Response(JSON.stringify({
      error: 'Erreur lors du traitement de la requ√™te',
      details: error?.message || 'Unknown error',
      timestamp: new Date().toISOString(),
      suggestions: []
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});