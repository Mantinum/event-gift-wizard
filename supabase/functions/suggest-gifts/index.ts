import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
};

serve(async (req) => {
  console.log('üöÄ Function started successfully');
  console.log('Request method:', req.method);
  console.log('Request URL:', req.url);
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Handling CORS preflight request');
    return new Response(null, { headers: corsHeaders });
  }

  // 1. Force POST method
  if (req.method !== 'POST') {
    console.log('‚ùå Method not allowed:', req.method);
    return new Response(JSON.stringify({
      success: false,
      error: 'Method not allowed',
      method: req.method
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  try {
    console.log('üì• Processing request...');
    
    // 2. Parse body with try/catch
    let body: any = {};
    try {
      body = await req.json();
    } catch (parseError) {
      console.log('‚ùå Invalid JSON body:', parseError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Invalid JSON body'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const { personId, eventType, budget, additionalContext } = body;
    
    // 3. Validate required parameters
    if (!personId || typeof eventType !== 'string' || typeof budget !== 'number') {
      console.log('‚ùå Missing or invalid parameters:', { personId, eventType, budget });
      return new Response(JSON.stringify({
        success: false,
        error: 'Missing or invalid parameters',
        details: { personId, eventType, budget }
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }
    
    // 4. Check environment variables
    const openAIKey = Deno.env.get('OPENAI_API_KEY');
    const serpApiKey = Deno.env.get('SERPAPI_API_KEY');
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY');
    
    console.log('üîë Environment check:');
    console.log('- OpenAI Key available:', !!openAIKey);
    console.log('- SerpApi Key available:', !!serpApiKey);
    console.log('- Supabase URL available:', !!supabaseUrl);
    console.log('- Supabase Key available:', !!supabaseKey);
    
    if (!openAIKey) {
      console.log('‚ùå Missing OpenAI API key');
      return new Response(JSON.stringify({
        success: false,
        error: 'Configuration manquante: cl√© OpenAI non configur√©e'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // SerpApi not required for this function - just warn if missing
    if (!serpApiKey) {
      console.log('‚ö†Ô∏è SERPAPI_API_KEY is missing (not used in this function)');
    }

    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ùå Missing Supabase environment variables');
      return new Response(JSON.stringify({
        success: false,
        error: 'Configuration manquante: variables Supabase non configur√©es'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Get service role key for database access (bypasses RLS)
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    if (!supabaseServiceKey) {
      console.log('‚ùå Missing Supabase Service Role key');
      return new Response(JSON.stringify({
        success: false,
        error: 'Configuration manquante: cl√© service Supabase non configur√©e'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Initialize Supabase client with service role key (bypasses RLS)
    const supabase = createClient(supabaseUrl, supabaseServiceKey);
    console.log('üìã Request data:', { personId, eventType, budget, additionalContext });

    // Fetch person data from database
    console.log('üîç Fetching person data for ID:', personId);
    const { data: personData, error: personError } = await supabase
      .from('persons')
      .select('*')
      .eq('id', personId)
      .maybeSingle(); // Use maybeSingle instead of single to avoid errors when no data found

    console.log('üìä Database response - Data:', personData);
    console.log('üìä Database response - Error:', personError);

    if (personError) {
      console.error('‚ùå Database error:', personError.message, personError.code);
      return new Response(JSON.stringify({
        success: false,
        error: 'DB error',
        details: personError.message,
        code: personError.code
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!personData) {
      console.error('‚ùå Person not found with ID:', personId);
      return new Response(JSON.stringify({
        success: false,
        error: 'Person not found',
        personId: personId
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log('üë§ Person data:', personData);

    // Create intelligent prompt for OpenAI
    const prompt = `Tu es un expert en suggestions de cadeaux personnalis√©s. G√©n√®re 3 suggestions de cadeaux pour cette personne :

PROFIL DE LA PERSONNE:
- Nom: ${personData.name}
- √Çge: ${personData.age_years ? `${personData.age_years} ans` : 'Non sp√©cifi√©'}
- Genre: ${personData.gender || 'Non sp√©cifi√©'}
- Relation: ${personData.relationship || 'Non sp√©cifi√©'}
- Centres d'int√©r√™t: ${personData.interests?.join(', ') || 'Aucun sp√©cifi√©'}
- Cat√©gories pr√©f√©r√©es: ${personData.preferred_categories?.join(', ') || 'Aucune sp√©cifi√©e'}
- Notes personnelles: ${personData.notes || 'Aucune'}
- Dernier cadeau offert: ${personData.last_gift || 'Aucun'}

CONTEXTE DE L'√âV√âNEMENT:
- Type d'√©v√©nement: ${eventType}
- Budget: ${budget}‚Ç¨
- Contexte suppl√©mentaire: ${additionalContext || 'Aucun'}

INSTRUCTIONS:
1. Prends en compte l'√¢ge, les int√©r√™ts et la personnalit√©
2. Respecte le budget indiqu√©
3. √âvite de r√©p√©ter le dernier cadeau s'il est mentionn√©
4. Sois cr√©atif et personnel dans tes suggestions
5. Explique pourquoi chaque cadeau convient √† cette personne

R√©ponds uniquement avec un JSON valide contenant un tableau de 3 suggestions au format :
{
  "suggestions": [
    {
      "title": "Titre du cadeau",
      "description": "Description d√©taill√©e du cadeau et pourquoi il convient",
      "estimatedPrice": 50,
      "confidence": 0.9,
      "reasoning": "Explication d√©taill√©e du choix bas√©e sur le profil",
      "category": "cat√©gorie du cadeau",
      "alternatives": ["alternative 1", "alternative 2"],
      "purchaseLinks": []
    }
  ]
}`;

    // Call OpenAI API with forced JSON response
    console.log('ü§ñ Calling OpenAI API...');
    const openAIResponse = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        response_format: { type: 'json_object' },
        messages: [
          {
            role: 'system',
            content: 'Tu es un expert en cadeaux personnalis√©s. Tu r√©ponds UNIQUEMENT avec du JSON valide, sans texte suppl√©mentaire.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.7
      }),
    });

    if (!openAIResponse.ok) {
      const errText = await openAIResponse.text();
      console.error('‚ùå OpenAI API error:', openAIResponse.status, errText);
      return new Response(JSON.stringify({
        success: false,
        error: 'OpenAI error',
        status: openAIResponse.status,
        details: errText
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Parse the AI response with better error handling
    let suggestions = [];
    try {
      const openAIData = await openAIResponse.json();
      console.log('‚úÖ OpenAI response received');
      
      const aiContent = openAIData.choices?.[0]?.message?.content ?? '{}';
      console.log('üß† AI content:', aiContent);
      
      const parsedResponse = JSON.parse(aiContent);
      suggestions = parsedResponse.suggestions || [];
    } catch (parseError) {
      console.error('‚ùå Error parsing OpenAI response:', parseError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Failed to parse OpenAI JSON',
        details: (parseError as Error).message
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log('üéÅ Generated suggestions:', suggestions.length);
    return new Response(JSON.stringify({
      success: true,
      suggestions,
      personName: personData.name,
      eventType,
      budget
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå ERROR in edge function:', error);
    console.error('Error name:', error?.name);
    console.error('Error message:', error?.message);
    console.error('Error stack:', error?.stack);
    
    return new Response(JSON.stringify({
      success: false,
      error: 'Erreur lors du traitement de la requ√™te',
      details: error?.message || 'Unknown error',
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});