import { createClient } from "npm:@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
  'Vary': 'Origin',
};

// Nouvelles fonctions utilitaires pour l'approche bas√©e sur les vrais produits Amazon

function generateTargetedSearchQueries(personData: any, eventType: string, budget: number): string[] {
  const queries = [];
  const interests = personData.interests || [];
  const notes = personData.notes || '';
  const age = personData.age_years || 0;
  const timestamp = Date.now();
  
  // Ajouter de la randomisation avec des variantes de requ√™tes
  const randomVariants = [
    ['nouveau', 'moderne', 'tendance'],
    ['original', 'unique', 'cr√©atif'],
    ['pratique', 'utile', 'fonctionnel'],
    ['premium', 'qualit√©', 'haut de gamme']
  ];
  
  const getRandomVariant = () => {
    const category = randomVariants[Math.floor(Math.random() * randomVariants.length)];
    return category[Math.floor(Math.random() * category.length)];
  };
  
  // Queries bas√©es sur les centres d'int√©r√™t avec randomisation
  if (interests.includes('Tech')) {
    const variants = budget > 80 
      ? [`gadget technologique ${getRandomVariant()}`, `accessoire high tech ${getRandomVariant()}`]
      : [`accessoire tech ${getRandomVariant()}`, `gadget connect√© ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  if (interests.includes('Sport')) {
    const variants = [`√©quipement sport ${getRandomVariant()}`, `accessoire fitness ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  if (interests.includes('Lecture')) {
    const variants = [`livre ${getRandomVariant()} 2025`, `accessoire lecture ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  if (interests.includes('Cuisine')) {
    const variants = [`ustensile cuisine ${getRandomVariant()}`, `accessoire gourmand ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  if (interests.includes('Jardinage')) {
    const variants = [`kit jardinage ${getRandomVariant()}`, `plante cadeau ${getRandomVariant()}`, `outil jardin ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5).slice(0, 2));
  }
  
  if (interests.includes('Artisanat')) {
    const variants = [`kit cr√©atif DIY ${getRandomVariant()}`, `mat√©riel artisanat ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  if (interests.includes('Mode')) {
    const variants = [`accessoire mode ${getRandomVariant()}`, `bijou ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  if (interests.includes('Enfance') || interests.includes('B√©b√©')) {
    const variants = [`jouet √©veil b√©b√© ${getRandomVariant()}`, `livre enfant ${getRandomVariant()}`, `v√™tement b√©b√© ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5).slice(0, 2));
  }
  
  // Queries bas√©es sur les notes avec randomisation
  if (notes.toLowerCase().includes('nature')) {
    const variants = [`produit √©cologique ${getRandomVariant()}`, `accessoire nature ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  if (notes.toLowerCase().includes('musique')) {
    const variants = [`accessoire musique ${getRandomVariant()}`, `instrument d√©butant ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  // Queries bas√©es sur l'√¢ge avec randomisation
  if (age > 60) {
    const variants = [`cadeau senior ${getRandomVariant()}`, `accessoire bien-√™tre ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  } else if (age > 30) {
    const variants = [`cadeau adulte ${getRandomVariant()}`, `accessoire maison ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  } else if (age > 15) {
    const variants = [`cadeau jeune adulte ${getRandomVariant()}`, `accessoire ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  // Queries bas√©es sur l'√©v√©nement avec randomisation
  if (eventType === 'birthday') {
    const variants = [`cadeau anniversaire ${getRandomVariant()}`, `id√©e cadeau personnalis√© ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  if (eventType === 'wedding') {
    const variants = [`cadeau mariage ${getRandomVariant()}`, `d√©coration maison ${getRandomVariant()}`];
    queries.push(...variants.sort(() => Math.random() - 0.5));
  }
  
  // Queries g√©n√©riques de fallback avec randomisation
  if (queries.length < 3) {
    const fallbackVariants = [
      `cadeau ${getRandomVariant()} ${timestamp % 1000}`, 
      `id√©e cadeau ${getRandomVariant()}`, 
      `accessoire ${getRandomVariant()}`
    ];
    queries.push(...fallbackVariants.sort(() => Math.random() - 0.5));
  }
  
  // M√©langer toutes les requ√™tes et ajouter un √©l√©ment de temps pour garantir la vari√©t√©
  const finalQueries = queries
    .map(q => `${q} ${Math.random() > 0.7 ? getRandomVariant() : ''}`.trim())
    .sort(() => Math.random() - 0.5)
    .slice(0, 8); // Max 8 requ√™tes
    
  console.log('üé≤ Requ√™tes randomis√©es g√©n√©r√©es:', finalQueries);
  return finalQueries;
}

// Normalisation RainforestAPI selon approche simplifi√©e
function normalizeRainforestItem(item: any) {
  const asinField = toAsin(item.asin);
  const asinFromLink = extractAsinFromUrl(item.link);
  const asin = isValidAsin(asinFromLink) ? asinFromLink : asinField;

  // 1) si link contient /dp/, garde-le
  const direct = item.link && item.link.includes('/dp/') ? item.link : null;
  // 2) sinon, si ASIN valide => /dp/ASIN
  const dp = !direct && isValidAsin(asin) ? `https://www.amazon.fr/dp/${asin}` : null;
  // 3) sinon, fallback recherche
  const title = item.title || '';
  const search = `https://www.amazon.fr/s?k=${encodeURIComponent(title.replace(/[^\w\s-]/g, ' ').trim())}`;

  const price = parseFloat(String(item.price?.value ?? item.price ?? '')
    .replace(/[^\d.,]/g, '')
    .replace(',', '.')) || undefined;

  return {
    title,
    asin,
    link: withAffiliate(direct || dp || search),
    searchUrl: withAffiliate(search),
    price,
    rating: item.rating,
    reviewCount: item.reviews_count,
    imageUrl: item.image,
    snippet: item.snippet,
    description: item.snippet,
    displayDescription: item.snippet || null
  };
}

// Recherche de produits Amazon avec RainforestAPI
async function searchAmazonProductsRainforest(
  query: string, 
  minPrice: number, 
  maxPrice: number, 
  rainforestApiKey: string
): Promise<any[]> {
  try {
    console.log(`üåßÔ∏è RainforestAPI - Recherche Amazon: "${query}" (${minPrice}‚Ç¨-${maxPrice}‚Ç¨)`);
    console.log(`üîë RainforestAPI Key length: ${rainforestApiKey.length} chars`);
    
    const searchUrl = `https://api.rainforestapi.com/request?api_key=${rainforestApiKey}&type=search&amazon_domain=amazon.fr&search_term=${encodeURIComponent(query)}&min_price=${minPrice}&max_price=${maxPrice}`;
    console.log(`üì° RainforestAPI Request URL: ${searchUrl.replace(rainforestApiKey, 'HIDDEN')}`);
    
    const response = await withTimeoutFetch(searchUrl, {}, 6000);
    console.log(`üì° RainforestAPI Response: ${response.status} ${response.statusText}`);
    
    if (!response.ok) {
      const errorText = await response.text().catch(() => 'Unknown error');
      console.error(`‚ùå RainforestAPI HTTP error: ${response.status} - ${errorText}`);
      return [];
    }

    const data = await response.json();
    console.log(`üìä RainforestAPI Response data keys:`, Object.keys(data));
    
    if (data.request_info?.success === false) {
      console.error('‚ùå RainforestAPI API error:', data.request_info?.message);
      return [];
    }

    const products = (data.search_results || [])
      .filter((item: any) => item.asin) // Garder seulement ceux avec ASIN
      .map(normalizeRainforestItem)
      .filter(item => {
        // Ne garder que les produits avec lien /dp/ OU ASIN valide
        return (item.link && item.link.includes('/dp/')) || isValidAsin(item.asin);
      })
      .filter(item => {
        // Filtrer par prix si disponible
        if (!item.price) return true;
        return item.price >= minPrice && item.price <= maxPrice;
      })
      .slice(0, 5); // Max 5 produits par requ√™te
    
    console.log(`üì¶ RainforestAPI - Products found for "${query}": ${products.length}`);
    return products;
  } catch (error) {
    console.error(`‚ùå Erreur RainforestAPI lors de la recherche Amazon pour "${query}":`, error);
    return [];
  }
}

// Timeout wrapper for fetch requests with proper AbortController
function withTimeoutFetch(url: string, init: RequestInit = {}, ms = 6000): Promise<Response> {
  const controller = new AbortController();
  const timeout = setTimeout(() => controller.abort(), ms);
  
  return fetch(url, { ...init, signal: controller.signal })
    .finally(() => clearTimeout(timeout));
}

// Normalisation SerpAPI selon approche simplifi√©e
function normalizeSerpApiItem(item: any) {
  const asinField = toAsin(item.asin);
  const asinFromLink = extractAsinFromUrl(item.link);
  const asin = isValidAsin(asinFromLink) ? asinFromLink : asinField;

  // 1) si link contient /dp/, garde-le
  const direct = item.link && item.link.includes('/dp/') ? item.link : null;
  // 2) sinon, si ASIN valide => /dp/ASIN
  const dp = !direct && isValidAsin(asin) ? `https://www.amazon.fr/dp/${asin}` : null;
  // 3) sinon, fallback recherche
  const title = item.title || '';
  const search = `https://www.amazon.fr/s?k=${encodeURIComponent(title.replace(/[^\w\s-]/g, ' ').trim())}`;

  return {
    title,
    asin,
    link: withAffiliate(direct || dp || search),
    searchUrl: withAffiliate(search),
    price: item.price ? parseFloat(String(item.price).replace(/[^\d,]/g, '').replace(',', '.')) : undefined,
    rating: item.rating,
    reviewCount: item.reviews_count,
    imageUrl: item.thumbnail,
    snippet: item.snippet,
    description: item.description,
    displayDescription: item.snippet || item.description || null
  };
}

// Recherche de produits Amazon avec SerpApi et fallback RainforestAPI
async function searchAmazonProducts(query: string, serpApiKey: string | undefined, minPrice: number, maxPrice: number, rainforestApiKey?: string) {
  let products: any[] = [];
  
  // Essayer SerpAPI en premier si disponible
  if (serpApiKey) {
    try {
      console.log(`üîç Recherche Amazon (SerpAPI): "${query}" (${minPrice}‚Ç¨-${maxPrice}‚Ç¨)`);
      console.log(`üîë SerpAPI Key length: ${serpApiKey.length} chars`);
      
      const params = new URLSearchParams({
        engine: 'amazon',
        amazon_domain: 'amazon.fr',
        language: 'fr_FR',
        k: query,
        low_price: minPrice.toString(),
        high_price: maxPrice.toString(),
        api_key: serpApiKey,
      });
      
      const searchUrl = `https://serpapi.com/search.json?${params}`;
      console.log(`üì° SerpAPI Request URL: ${searchUrl.replace(serpApiKey, 'HIDDEN')}`);
      
      const response = await withTimeoutFetch(searchUrl, {}, 6000);
      console.log(`üì° SerpAPI Response: ${response.status} ${response.statusText}`);
      
      if (response.ok) {
        const data = await response.json();
        console.log(`üìä SerpAPI Response data keys:`, Object.keys(data));
        
        if (data.error) {
          console.error('‚ùå SerpAPI API Error:', data.error);
          throw new Error(`SerpAPI Error: ${data.error}`);
        }
        
        if (!data.error) {
          const results = data.organic_results || [];
          console.log(`üì¶ SerpAPI Raw results count: ${results.length}`);
          
          products = results
            .filter((item: any) => item.asin) // Garder seulement ceux avec ASIN
            .map(normalizeSerpApiItem)
            .filter(item => {
              // Ne garder que les produits avec lien /dp/ OU ASIN valide
              return (item.link && item.link.includes('/dp/')) || isValidAsin(item.asin);
            })
            .filter(item => {
              // Filtrer par prix si disponible
              if (!item.price) return true;
              return item.price >= minPrice && item.price <= maxPrice;
            })
            .slice(0, 5);
          
          console.log(`‚úÖ SerpAPI - ${products.length} produits trouv√©s pour "${query}"`);
          
          console.log(`‚úÖ SerpAPI - ${products.length} produits normalis√©s pour "${query}"`);
          
          if (products.length > 0) {
            return products;
          } else {
            console.warn(`‚ö†Ô∏è SerpAPI - 0 produits apr√®s normalisation pour "${query}"`);
          }
        }
      } else {
        const errorText = await response.text().catch(() => 'Unknown error');
        console.error(`‚ùå SerpAPI HTTP error: ${response.status} - ${errorText}`);
      }
    } catch (error) {
      console.error(`‚ùå SerpAPI exception for "${query}":`, error);
      console.error(`   Error type: ${error?.name}`);
      console.error(`   Error message: ${error?.message}`);
    }
  }
  
  // Fallback vers RainforestAPI si SerpAPI a √©chou√© ou n'est pas disponible
  if (rainforestApiKey && products.length === 0) {
    console.log(`üåßÔ∏è Tentative RainforestAPI pour "${query}" apr√®s √©chec SerpAPI`);
    products = await searchAmazonProductsRainforest(query, minPrice, maxPrice, rainforestApiKey);
  } else if (!rainforestApiKey && products.length === 0) {
    console.warn(`‚ö†Ô∏è RainforestAPI non disponible et SerpAPI a √©chou√© pour "${query}"`);
  }
  
  console.log(`üéØ Final products count for "${query}": ${products.length}`);
  return products;
}

function diversifyProducts(products: any[], maxProducts: number) {
  // Supprimer les doublons par ASIN
  const uniqueProducts = products.filter((product, index, self) => 
    index === self.findIndex(p => p.asin === product.asin)
  );
  
  // Trier par pertinence (prix m√©dian et note √©lev√©e)
  uniqueProducts.sort((a, b) => {
    const scoreA = (a.rating || 3) * (a.reviewCount || 1);
    const scoreB = (b.rating || 3) * (b.reviewCount || 1);
    return scoreB - scoreA;
  });
  
  return uniqueProducts.slice(0, maxProducts);
}

// Helper functions for affiliate links and ASIN validation
const partnerTag = Deno.env.get('AMZ_PARTNER_TAG') || '';
const partnerTagActive = (Deno.env.get('AMZ_PARTNER_TAG_ACTIVE') || 'false').toLowerCase() === 'true';

function appendQuery(url: string, key: string, value: string) {
  const u = new URL(url);
  if (value) u.searchParams.set(key, value);
  return u.toString();
}

function withAffiliate(url: string) {
  return (partnerTagActive && partnerTag) ? appendQuery(url, 'tag', partnerTag) : url;
}

// Helpers robustes pour ASIN
const toAsin = (a?: string) => (a || '').toUpperCase().trim();
const ASIN_RES = [
  /\/dp\/([A-Z0-9]{10})(?:[/?]|$)/i,
  /\/gp\/product\/([A-Z0-9]{10})(?:[/?]|$)/i,
  /[?&]ASIN=([A-Z0-9]{10})(?:[&#]|$)/i,
];
const isValidAsin = (a?: string) => /^[A-Z0-9]{10}$/.test(toAsin(a));

function extractAsinFromUrl(url?: string) {
  if (!url) return null;
  for (const re of ASIN_RES) {
    const m = url.match(re);
    if (m) return toAsin(m[1]);
  }
  return null;
}

// V√©rification optionnelle des liens DP c√¥t√© serveur
const VERIFY_DP = (Deno.env.get('VERIFY_DP') || 'false').toLowerCase() === 'true';

async function dpLooksValid(url: string, ms = 800) {
  const c = new AbortController(); 
  const t = setTimeout(() => c.abort(), ms);
  try {
    const r = await fetch(url, { method: 'HEAD', redirect: 'manual', signal: c.signal });
    return r.status >= 200 && r.status < 400;
  } catch { return false; } 
  finally { clearTimeout(t); }
}
const normalizeTitle = (s: string) =>
  s
    .toLowerCase()
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '') // enl√®ve accents
    .replace(/[^a-z0-9\s]/g, ' ')
    .replace(/\s+/g, ' ')
    .trim();

// Fonction de similarit√© pour fuzzy matching
function similarity(a: string, b: string) {
  const A = new Set(normalizeTitle(a).split(' ').filter(x => x.length > 1));
  const B = new Set(normalizeTitle(b).split(' ').filter(x => x.length > 1));
  const inter = [...A].filter(x => B.has(x)).length;
  const uni = new Set([...A, ...B]).size;
  return uni ? inter / uni : 0;
}

function bestPoolMatchByTitle(title: string, pool: any[], threshold = 0.45) {
  let best = null, bestScore = 0;
  for (const p of pool) {
    const score = similarity(title, p.title || '');
    if (score > bestScore) { best = p; bestScore = score; }
  }
  return bestScore >= threshold ? best : null;
}

Deno.serve(async (req) => {
  console.log('üöÄ Function started successfully');
  console.log('Request method:', req.method);
  console.log('Request URL:', req.url);
  
  if (req.method === 'OPTIONS') {
    console.log('‚úÖ Handling CORS preflight request');
    return new Response(null, { status: 204, headers: corsHeaders });
  }

  // Health check for debugging
  if (req.method === 'GET') {
    console.log('‚úÖ Health check request');
    return new Response(JSON.stringify({ ok: true, timestamp: new Date().toISOString() }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  // 1. Force POST method
  if (req.method !== 'POST') {
    console.log('‚ùå Method not allowed:', req.method);
    return new Response(JSON.stringify({
      success: false,
      error: 'Method not allowed',
      method: req.method
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }

  try {
    console.log('üì• Processing request...');
  // Redact Authorization in logs
  const safeHeaders = Object.fromEntries(
    [...req.headers.entries()].map(([k,v]) => k.toLowerCase()==='authorization' ? [k,'REDACTED'] : [k,v])
  );
  console.log('üîë Headers:', safeHeaders);
    
    // 2. Parse body with try/catch
    let body: any = {};
    try {
      const requestText = await req.text();
      console.log('üì• Raw request body:', requestText);
      console.log('üì• Content-Type:', req.headers.get('content-type'));
      
      if (!requestText) {
        console.log('‚ùå Empty request body');
        return new Response(JSON.stringify({
          success: false,
          error: 'Empty request body'
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
      
      body = JSON.parse(requestText);
      console.log('‚úÖ Parsed body:', body);
    } catch (parseError) {
      console.log('‚ùå Invalid JSON body:', parseError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Invalid JSON body - ' + (parseError as Error).message
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    const { personId, eventType, budget, additionalContext } = body;
    
    // 3. Validate required parameters
    if (!personId || typeof eventType !== 'string' || typeof budget !== 'number') {
      console.log('‚ùå Missing or invalid parameters:', { personId, eventType, budget });
      return new Response(JSON.stringify({
        success: false,
        error: 'Missing or invalid parameters',
        details: { personId, eventType, budget }
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }
    
    // 4. Check environment variables
    const openAIKey = Deno.env.get('OPENAI_API_KEY');
    const serpApiKey = Deno.env.get('SERPAPI_API_KEY');
    const rainforestApiKey = Deno.env.get('RAINFOREST_API_KEY');
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseKey = Deno.env.get('SUPABASE_ANON_KEY');
    
    console.log('üîë Environment check:');
    console.log('- OpenAI Key available:', !!openAIKey, openAIKey ? `(${openAIKey.length} chars)` : '');
    console.log('- SerpApi Key available:', !!serpApiKey, serpApiKey ? `(${serpApiKey.length} chars)` : '');
    console.log('- RainforestAPI Key available:', !!rainforestApiKey, rainforestApiKey ? `(${rainforestApiKey.length} chars)` : '');
    console.log('- Supabase URL available:', !!supabaseUrl);
    console.log('- Supabase Key available:', !!supabaseKey);
    
    if (!openAIKey) {
      console.log('‚ùå Missing OpenAI API key');
      return new Response(JSON.stringify({
        success: false,
        error: 'Configuration manquante: cl√© OpenAI non configur√©e'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Log API availability but don't fail - allow fallback
    if (!serpApiKey && !rainforestApiKey) {
      console.warn('‚ö†Ô∏è Aucune cl√© API de recherche disponible - mode fallback uniquement');
      console.warn('   - SERPAPI_API_KEY:', serpApiKey ? 'SET' : 'MISSING');
      console.warn('   - RAINFOREST_API_KEY:', rainforestApiKey ? 'SET' : 'MISSING');
    }

    if (!supabaseUrl || !supabaseKey) {
      console.log('‚ùå Missing Supabase environment variables');
      return new Response(JSON.stringify({
        success: false,
        error: 'Configuration manquante: variables Supabase non configur√©es'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Get service role key for database access (bypasses RLS)
    const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY');
    if (!supabaseServiceKey) {
      console.log('‚ùå Missing Supabase Service Role key');
      return new Response(JSON.stringify({
        success: false,
        error: 'Configuration manquante: cl√© service Supabase non configur√©e'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // Initialize Supabase client with service role key (bypasses RLS)
    const supabase = createClient(supabaseUrl, supabaseServiceKey, {
      auth: { persistSession: false }
    });
    console.log('üìã Request data:', { personId, eventType, budget, additionalContext });

    // 5. Check authentication and AI usage limits
    console.log('üîí Checking authentication and usage limits...');
    
    // With verify_jwt = true, Supabase automatically verifies the JWT
    // and provides the user in the request context
    const authHeader = req.headers.get('authorization');
    if (!authHeader) {
      console.log('‚ùå No authorization header');
      return new Response(JSON.stringify({
        success: false,
        error: 'Authentication requise'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 401
      });
    }

    // Create supabase client for user operations
    const supabaseAuth = createClient(supabaseUrl, supabaseKey, {
      global: {
        headers: {
          Authorization: authHeader
        }
      },
      auth: { persistSession: false }
    });

    // Get authenticated user
    const { data: { user }, error: authError } = await supabaseAuth.auth.getUser();
    console.log('üë§ User:', user?.id);
    
    if (authError || !user) {
      console.log('‚ùå Authentication failed:', authError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Authentication √©chou√©e'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 401
      });
    }

    // Check AI usage limits using the database function
    console.log('üéØ Checking AI usage limits for user:', user.id);
    const { data: usageResult, error: usageError } = await supabase
      .rpc('check_and_increment_ai_usage', { p_user_id: user.id });

    console.log('üìä Usage check result:', usageResult);
    console.log('‚ùå Usage check error:', usageError);

    if (usageError) {
      console.error('‚ùå Error checking usage limits:', usageError);
      return new Response(JSON.stringify({
        success: false,
        error: 'Erreur lors de la v√©rification des limites d\'utilisation'
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!usageResult.allowed) {
      console.log('‚ùå Usage limit exceeded for user:', user.id);
      return new Response(JSON.stringify({
        success: false,
        error: 'Limite quotidienne d√©pass√©e',
        details: {
          limit: usageResult.limit,
          remaining: usageResult.remaining,
          role: usageResult.role,
          resetTime: usageResult.reset_time
        }
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 429
      });
    }

    console.log('‚úÖ Usage allowed. Remaining:', usageResult.remaining);

    // Fetch person data from database
    console.log('üîç Fetching person data for ID:', personId);
    const { data: personData, error: personError } = await supabase
      .from('persons')
      .select('*')
      .eq('id', personId)
      .maybeSingle(); // Use maybeSingle instead of single to avoid errors when no data found

    console.log('üìä Database response - Data:', personData);
    console.log('üìä Database response - Error:', personError);

    if (personError) {
      console.error('‚ùå Database error:', personError.message, personError.code);
      return new Response(JSON.stringify({
        success: false,
        error: 'DB error',
        details: personError.message,
        code: personError.code
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    if (!personData) {
      console.error('‚ùå Person not found with ID:', personId);
      return new Response(JSON.stringify({
        success: false,
        error: 'Person not found',
        personId: personId
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    console.log('üë§ Person data:', personData);

    // üîÑ NOUVELLE APPROCHE: D'abord chercher les vrais produits Amazon, puis l'IA choisit parmi eux
    console.log('üîç √âtape 1: Recherche pr√©liminaire de produits Amazon dans le budget');
    
    const maxBudget = budget;
    const minBudget = Math.max(15, Math.round(budget * 0.7)); // Minimum 70% du budget pour √©viter les produits trop bas
    
    // G√©n√©rer des requ√™tes de recherche cibl√©es bas√©es sur le profil
    const searchQueries = generateTargetedSearchQueries(personData, eventType, budget);
    console.log('üìù Requ√™tes de recherche g√©n√©r√©es:', searchQueries);
    
    // Chercher des produits r√©els sur Amazon pour chaque requ√™te avec parall√©lisation
    const availableProducts = [];
    
    console.log('üîç V√©rification des cl√©s API:', { 
      serpApiKey: !!serpApiKey, 
      rainforestApiKey: !!rainforestApiKey,
      serpLength: serpApiKey?.length || 0,
      rainforestLength: rainforestApiKey?.length || 0
    });
    
    if (serpApiKey || rainforestApiKey) {
      console.log('‚úÖ Au moins une cl√© API disponible, d√©but recherche...');
      // Limite √† 4 requ√™tes max, concurrence 2, timeout strict
      const queries = searchQueries.slice(0, 4);
      const startTime = Date.now();
      const MAX_WALL_MS = 15000; // 15s mur global

      const searchTasks = queries.map(query => async () => {
        if (Date.now() - startTime > MAX_WALL_MS) throw new Error('global-timeout');
        try {
          console.log(`üîç Recherche parall√®le pour "${query}"`);
          const results = await searchAmazonProducts(query, serpApiKey, minBudget, maxBudget, rainforestApiKey);
          console.log(`üì¶ R√©sultats bruts pour "${query}":`, results?.length || 0);
          if (results && results.length > 0) {
            console.log(`‚úÖ ${results.length} produits trouv√©s pour "${query}"`);
            const limitedResults = results.slice(0, 3); // Max 3 produits par requ√™te
            console.log(`üìã √âchantillon des r√©sultats:`, limitedResults.slice(0, 1).map(r => ({
              title: r.title?.substring(0, 50),
              asin: r.asin,
              link: r.link?.substring(0, 50),
              price: r.price
            })));
            return limitedResults;
          }
          console.log(`‚ùå Aucun produit trouv√© pour "${query}"`);
          return [];
        } catch (error) {
          console.error(`‚ùå Erreur recherche "${query}":`, error);
          return [];
        }
      });

      // Ex√©cution avec plafond de concurrence
      async function runLimited(funcs: Array<() => Promise<any[]>>, limit = 2) {
        const out: any[] = [];
        let i = 0;
        const runners = Array.from({ length: Math.min(limit, funcs.length) }, async function run() {
          while (i < funcs.length && Date.now() - startTime < MAX_WALL_MS) {
            const idx = i++;
            const res = await funcs[idx]();
            out.push(...(res || []));
          }
        });
        await Promise.allSettled(runners);
        return out;
      }

      const allResults = await runLimited(searchTasks, 2);
      availableProducts.push(...allResults);
      console.log(`üì¶ Total apr√®s parall√©lisation: ${availableProducts.length}`);
    } else {
      console.log('‚ùå Aucune cl√© API disponible pour la recherche');
    }
    
    console.log(`üì¶ Total produits disponibles: ${availableProducts.length}`);
    
    // Debug d√©taill√© des produits avant filtrage
    if (availableProducts.length > 0) {
      console.log('üîç √âchantillon de produits bruts avant filtrage:');
      availableProducts.slice(0, 3).forEach((p, i) => {
        console.log(`  [${i}] Title: ${p.title?.substring(0, 60)}...`);
        console.log(`      ASIN: ${p.asin} (valid: ${isValidAsin(p.asin)})`);
        console.log(`      Link: ${p.link?.substring(0, 80)}... (has /dp/: ${p.link?.includes('/dp/')})`);
        console.log(`      Price: ${p.price}`);
      });
    }
    
    // ‚ö†Ô∏è Filtre global : aucun produit sans dp ni ASIN valide ne passe dans le pool
    const sanitized = availableProducts.filter(p => {
      const hasValidLink = p.link && p.link.includes('/dp/');
      const hasValidAsin = isValidAsin(p.asin);
      const isValid = hasValidLink || hasValidAsin;
      
      if (!isValid) {
        console.log(`‚ùå Produit rejet√©: ${p.title?.substring(0, 40)} - Link: ${hasValidLink ? '‚úÖ' : '‚ùå'}, ASIN: ${hasValidAsin ? '‚úÖ' : '‚ùå'}`);
      }
      
      return isValid;
    });
    console.log(`üßπ Produits apr√®s nettoyage: ${sanitized.length}`);
    
    // Debug des produits apr√®s filtrage
    if (sanitized.length > 0) {
      console.log('‚úÖ √âchantillon de produits apr√®s filtrage:');
      sanitized.slice(0, 2).forEach((p, i) => {
        console.log(`  [${i}] Title: ${p.title?.substring(0, 60)}...`);
        console.log(`      ASIN: ${p.asin}, Link: ${p.link?.substring(0, 80)}...`);
      });
    } else {
      console.log('‚ùå Aucun produit valide apr√®s filtrage');
    }
    
    // Limiter drastiquement les produits pour √©viter limite tokens
    const selectedProducts = diversifyProducts(sanitized, 4);
    console.log(`üéØ Produits s√©lectionn√©s apr√®s diversification: ${selectedProducts.length}`);
    
    if (selectedProducts.length === 0) {
      console.warn('‚ö†Ô∏è Aucun produit trouv√© via les APIs de recherche : passage en mode fallback');
      console.log('üîç D√©tail du pipeline:');
      console.log(`  - Requ√™tes g√©n√©r√©es: ${searchQueries.length}`);
      console.log(`  - Produits bruts trouv√©s: ${availableProducts.length}`);
      console.log(`  - Produits apr√®s filtrage: ${sanitized.length}`);
      console.log(`  - Produits finaux: ${selectedProducts.length}`);
      
      // Si aucun produit trouv√©, utiliser la logique de fallback directement
      return generateFallbackSuggestions(personData, eventType, budget);
    }

    // üéØ √âtape 2: Indexation des produits pour retrouver les liens directs
    const allPool = [...availableProducts, ...selectedProducts];
    const byAsin = new Map(
      allPool
        .filter(p => isValidAsin(p.asin))
        .map(p => [toAsin(p.asin), p])
    );
    const byTitle = new Map(allPool.map(p => [normalizeTitle(p.title || ''), p]));
    
    // Build enhanced context with personal notes priority
    const personalNotes = personData.notes || '';
    const contextInfo = personalNotes 
      ? `Notes personnelles: "${personalNotes}"`
      : `√Çge: ${personData.age_years || '?'} ans, Int√©r√™ts: ${personData.interests?.slice(0,3).join(', ') || 'N/A'}, Relation: ${personData.relationship || 'N/A'}`;

    const prompt = `S√©lectionne 3 produits pour ${personData.name}.
${contextInfo}
√âv√©nement: ${eventType}, Budget: ${minBudget}-${maxBudget}‚Ç¨

PRODUITS DISPONIBLES:
${selectedProducts.map((p, i) => `${i+1}. ${p.title.substring(0, 50)} - ${p.price}‚Ç¨ (ASIN: ${p.asin})`).join('\n')}

IMPORTANT: Tu DOIS choisir uniquement parmi les PRODUITS DISPONIBLES ci-dessus.
Renvoie l'ASIN exactement tel qu'affich√©. N'invente jamais d'ASIN.
${personalNotes ? 'Utilise prioritairement les notes personnelles pour choisir les produits les plus adapt√©s.' : 'Base-toi sur les centres d\'int√©r√™t et l\'√¢ge pour faire les meilleurs choix.'}

JSON obligatoire:`;

    // JSON schema simplifi√© pour √©viter limite tokens
    const responseSchema = {
      type: "json_schema",
      json_schema: {
        name: "gift_selection",
        strict: true,
        schema: {
          type: "object",
          properties: {
            selections: {
              type: "array",
              items: {
                type: "object",
                properties: {
                  selectedTitle: {
                    type: "string"
                  },
                  selectedPrice: {
                    type: "integer"
                  },
                  selectedAsin: {
                    type: "string"
                  },
                  confidence: {
                    type: "number",
                    minimum: 0,
                    maximum: 1
                  }
                },
                required: ["selectedTitle", "selectedPrice", "selectedAsin", "confidence"],
                additionalProperties: false
              },
              minItems: 3,
              maxItems: 3
            }
          },
          required: ["selections"],
          additionalProperties: false
        }
      }
    };

    // Call OpenAI API with forced JSON response
    // Ajouter de la randomisation dans le prompt pour l'IA
    const randomPromptVariation = Math.floor(Math.random() * 3);
    let promptVariation = '';
    
    switch(randomPromptVariation) {
      case 0:
        promptVariation = 'Sois cr√©atif et √©vite les choix √©vidents.';
        break;
      case 1:
        promptVariation = 'Privil√©gie la diversit√© et l\'originalit√© dans tes s√©lections.';
        break;
      case 2:
        promptVariation = 'Explore des options vari√©es et inattendues.';
        break;
    }

    // Fonction pour appeler OpenAI Chat Completions avec timeout
    async function callChatCompletions(model: string, maxTokens = 1200, userPrompt = prompt) {
      return withTimeoutFetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${openAIKey}`, 'Content-Type': 'application/json' },
        body: JSON.stringify({
          model,
          messages: [
            { role: 'system', content: `S√©lectionne 3 produits parmi la liste fournie. Tu DOIS choisir uniquement parmi les PRODUITS DISPONIBLES. Renvoie l'ASIN exactement tel qu'affich√©. N'invente jamais d'ASIN. Sois concis. R√©ponds UNIQUEMENT avec un JSON valide sans texte suppl√©mentaire. Format JSON exact: {"suggestions":[{ "title": "...", "price": 0, "asin": "<UN DES ASIN DE LA LISTE>", "confidence": 0.0, "reasoning": "..." }, ...3 au total]}. ${promptVariation}` },
            { role: 'user', content: userPrompt }
          ],
          max_tokens: maxTokens,
          temperature: 0.2,
          response_format: { type: 'json_object' }
        })
      }, 10000); // 10s timeout pour OpenAI
    }

    console.log('ü§ñ Calling OpenAI with GPT-4o-mini (stable model)');
    let modelUsed = 'gpt-4o-mini';
    // Utiliser Chat Completions directement pour plus de stabilit√©
    let openAIResponse = await callChatCompletions(modelUsed, 1200);

    if (!openAIResponse.ok) {
      // Lis le JSON d'erreur proprement
      let errJson: any = {};
      try { errJson = await openAIResponse.json(); } catch { /* ignore */ }
      const type = errJson?.error?.type;
      const param = errJson?.error?.param;
      const code = errJson?.error?.code;
      const msg  = errJson?.error?.message || (await openAIResponse.text().catch(()=>'')) || 'Unknown error';
      console.error('‚ùå OpenAI error:', openAIResponse.status, type, code, param, msg);

      // Gestion des erreurs sp√©cifiques
      if (openAIResponse.status === 400 && /context_length|maximum context length|too long/i.test(msg)) {
        console.warn('‚ö†Ô∏è Contexte trop long ‚Üí compression du prompt et retry');
        // R√©duire le prompt en gardant seulement 3 produits
        const shorterProducts = selectedProducts.slice(0, 3);
        const promptShort = `S√©lectionne 3 produits pour ${personData.name}.
${contextInfo}
√âv√©nement: ${eventType}, Budget: ${minBudget}-${maxBudget}‚Ç¨
PRODUITS:
${shorterProducts.map((p, i) => `${i+1}. ${p.title.substring(0, 40)} (${p.asin})`).join('\n')}
JSON: {"selections":[{ "selectedTitle": "...", "selectedPrice": 0, "selectedAsin": "...", "confidence": 0.0 }, ...3]}`;
        
        openAIResponse = await callChatCompletions(modelUsed, 900, promptShort);
        if (!openAIResponse.ok) {
          const err3 = await openAIResponse.text();
          console.error('‚ùå Retry apr√®s compression a √©chou√©:', openAIResponse.status, err3);
          return new Response(JSON.stringify({
            success: false,
            error: 'OpenAI error after context compression',
            status: openAIResponse.status,
            details: err3
          }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
        }
      } else {
        // autre erreur : on renvoie l'info utile
        return new Response(JSON.stringify({
          success: false,
          error: 'OpenAI error',
          status: openAIResponse.status,
          details: msg,
          type
        }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
      }
    }

    // Parse la r√©ponse (endpoints diff√©rents)
    let suggestions = [];
    try {
      const openAIData = await openAIResponse.json();
      console.log('‚úÖ OpenAI response received');
      console.log('üß† model:', openAIData.model || modelUsed);

      // V√©rifier si la r√©ponse a √©t√© tronqu√©e
      const finishReason = openAIData.choices?.[0]?.finish_reason;
      if (finishReason === 'length') {
        console.warn('‚ö†Ô∏è Troncature d√©tect√©e ‚Üí retry avec plus de tokens');
        const retry = await callChatCompletions(modelUsed, 1600, prompt);
        if (retry.ok) {
          const retryData = await retry.json();
          openAIData.choices = retryData.choices;
        }
      }
      
      // Extraction et nettoyage du contenu AI
      let aiContent = openAIData.choices?.[0]?.message?.content ?? '';
      console.log('üß† AI content length:', aiContent.length);
      console.log('üìù AI content preview:', aiContent.substring(0, 200));
      
      // Validation du contenu AI
      if (!aiContent || aiContent.trim().length === 0) {
        console.error('‚ùå R√©ponse AI vide d√©tect√©e');
        console.error('üîç Structure OpenAI compl√®te:', JSON.stringify(openAIData, null, 2));
        return new Response(JSON.stringify({
          success: false,
          error: 'R√©ponse AI vide',
          details: 'L\'IA n\'a g√©n√©r√© aucun contenu',
          debug: {
            hasChoices: !!openAIData.choices,
            choicesLength: openAIData.choices?.length || 0,
            finishReason: finishReason,
            model: openAIData.model
          }
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        });
      }
      
      // Nettoyage du contenu AI (suppression des markdown fences)
      const cleanedContent = aiContent.trim()
        .replace(/^```(?:json)?\s*/i, '')
        .replace(/```$/i, '')
        .trim();
      
      console.log('üßΩ Contenu nettoy√©:', cleanedContent.substring(0, 100));
      
      // Parsing JSON s√©curis√©
      let parsedResponse;
      try {
        parsedResponse = JSON.parse(cleanedContent);
      } catch (jsonError) {
        console.error('‚ùå Erreur parsing JSON:', jsonError);
        console.error('üîç Contenu original:', aiContent);
        console.error('üîç Contenu nettoy√©:', cleanedContent);
        throw new Error(`Erreur parsing JSON: ${(jsonError as Error).message}`);
      }
      
      // Parser tol√©rant - accepte "suggestions" ou "selections" 
      const rawSuggestions = Array.isArray(parsedResponse?.suggestions)
        ? parsedResponse.suggestions
        : Array.isArray(parsedResponse?.selections)
          ? parsedResponse.selections
          : [];

      console.log('üéØ Parsed direct suggestions count:', rawSuggestions.length);
      
      // Cr√©er un set des ASINs autoris√©s (du pool)
      const allowedAsins = new Set(selectedProducts.map(p => toAsin(p.asin)));
      
      // Normaliser et r√©concilier les suggestions IA
      const directSuggestions = rawSuggestions.map((raw: any) => ({
        title: raw.title ?? raw.selectedTitle ?? '',
        asin: toAsin(raw.asin ?? raw.selectedAsin ?? ''),
        price: raw.price ?? raw.selectedPrice ?? 0,
        confidence: raw.confidence ?? 0.5,
        reasoning: raw.reasoning ?? ''
      }));
      
      // Remplacement / rejet si ASIN hors pool
      const reconciled = directSuggestions.map(s => {
        if (allowedAsins.has(s.asin)) return s; // OK, ASIN trouv√© dans le pool
        
        // Tentative de rattrapage par titre ‚Üí r√©cup√©rer un produit du pool
        const match = bestPoolMatchByTitle(s.title, selectedProducts);
        if (match) {
          console.log(`üîÑ R√©conciliation: "${s.title}" ‚Üí "${match.title}" (ASIN: ${match.asin})`);
          return { 
            ...s, 
            asin: toAsin(match.asin), 
            title: match.title, 
            price: match.price 
          };
        }
        
        // Si le pool est petit (< 6 produits), on est moins strict
        if (selectedProducts.length < 6) {
          console.log(`‚ö†Ô∏è Pool r√©duit (${selectedProducts.length} produits), on garde "${s.title}" avec recherche`);
          return s; // On garde la suggestion m√™me si ASIN non trouv√©
        }
        
        // Rien trouv√© ‚Üí on refuse (√©vite les dp 404)
        console.warn(`‚ùå Rejet suggestion: "${s.title}" - ASIN "${s.asin}" hors pool et pas de match par titre`);
        return null;
      }).filter(Boolean);
      
      if (reconciled.length === 0) {
        return new Response(JSON.stringify({
          success: false,
          error: "Aucune suggestion valide : tous les ASINs sont hors liste"
        }), { headers: { ...corsHeaders, 'Content-Type': 'application/json' } });
      }
      
      if (reconciled.length < 3) {
        // Compl√©ter avec des produits du pool si pas assez de suggestions
        const usedAsins = new Set(reconciled.map(r => r.asin));
        const remainingProducts = selectedProducts.filter(p => !usedAsins.has(toAsin(p.asin)));
        
        while (reconciled.length < 3 && remainingProducts.length > 0) {
          const randomProduct = remainingProducts.splice(Math.floor(Math.random() * remainingProducts.length), 1)[0];
          reconciled.push({
            title: randomProduct.title,
            asin: toAsin(randomProduct.asin),
            price: randomProduct.price || 0,
            confidence: 0.7,
            reasoning: `Produit s√©lectionn√© automatiquement pour ${personData.name} selon son profil.`
          });
        }
      }

      // Cr√©er une map des produits du pool avec ASIN normalis√©s (seulement ASINs valides) en dehors du map
      const byAsin = new Map(selectedProducts.filter(p => isValidAsin(p.asin)).map(p => [toAsin(p.asin), p]));

      // Convert reconciled suggestions to final format - Using for...of to handle async properly
      const finalSuggestions: any[] = [];
      for (const suggestion of reconciled.slice(0, 3)) {
        console.log('üîç Processing suggestion:', {
          title: suggestion.title,
          asin: suggestion.asin,
          price: suggestion.price
        });
        
        // Generate enhanced description based on product title and person profile
        const generateEnhancedDescription = (title: string, reasoning: string, person: any) => {
          console.log('üîç G√©n√©ration description enrichie:', { 
            title, 
            reasoning: reasoning?.substring(0, 100)
          });
          
          // PRIORIT√â 1: Utiliser le raisonnement de l'IA s'il est pertinent
          if (reasoning && reasoning.length > 20 && !reasoning.includes('s√©lectionn√© pour') && !reasoning.toLowerCase().includes('generic')) {
            console.log('‚úÖ Utilisation raisonnement IA:', reasoning);
            return reasoning;
          }
          
          const interests = person.interests || [];
          const age = person.age_years || 0;
          const name = person.name;
          const lowerTitle = title.toLowerCase();
          
          // PRIORIT√â 2: D√©tection intelligente du type de produit √† partir du titre
          
          // Produits de randonn√©e/sport outdoor
          if (lowerTitle.includes('sac') && (lowerTitle.includes('dos') || lowerTitle.includes('randonn√©e') || lowerTitle.includes('camping'))) {
            return `Un sac √† dos de qualit√© pour accompagner ${name} dans ses aventures en plein air. R√©sistant et pratique, il sera l'alli√© parfait pour ses escapades sportives et ses voyages.`;
          }
          
          if (lowerTitle.includes('bouteille') && (lowerTitle.includes('eau') || lowerTitle.includes('sport') || lowerTitle.includes('pliable'))) {
            return `Une bouteille d'eau innovante et pratique pour ${name}. Parfaite pour rester hydrat√© pendant le sport ou les d√©placements, elle combine fonctionnalit√© et durabilit√©.`;
          }
          
          if (lowerTitle.includes('trousse') && lowerTitle.includes('premiers secours')) {
            return `Une trousse de premiers secours compacte et compl√®te pour ${name}. Indispensable pour la s√©curit√© lors des activit√©s outdoor, voyages ou √† la maison.`;
          }
          
          // √âquipements fitness/sport
          if (lowerTitle.includes('halt√®res') || lowerTitle.includes('poids') || lowerTitle.includes('musculation')) {
            return `Un √©quipement de musculation professionnel pour ${name}. Id√©al pour maintenir sa forme physique et d√©velopper sa force depuis chez elle.`;
          }
          
          if (lowerTitle.includes('tapis') && (lowerTitle.includes('yoga') || lowerTitle.includes('exercice') || lowerTitle.includes('fitness'))) {
            return `Un tapis d'exercice de qualit√© pour ${name}. Parfait pour pratiquer le yoga, le pilates ou tout autre exercice au sol dans le confort de son domicile.`;
          }
          
          // Accessoires de voyage
          if (lowerTitle.includes('organisateur') || lowerTitle.includes('organiseur')) {
            return `Un organisateur pratique pour ${name} qui aime les voyages bien pr√©par√©s. Ce produit l'aidera √† garder ses affaires ordonn√©es et facilement accessibles.`;
          }
          
          if (lowerTitle.includes('valise') || lowerTitle.includes('bagage')) {
            return `Une solution de voyage durable et pratique pour ${name}. Con√ßue pour accompagner ses aventures avec style et fonctionnalit√©.`;
          }
          
          // V√™tements et accessoires
          if (lowerTitle.includes('t-shirt') || lowerTitle.includes('maillot') || lowerTitle.includes('chemise')) {
            return `Un v√™tement confortable et styl√© pour ${name}. Parfait pour son style personnel et ses activit√©s quotidiennes.`;
          }
          
          if (lowerTitle.includes('casquette') || lowerTitle.includes('chapeau') || lowerTitle.includes('bonnet')) {
            return `Un accessoire de mode pratique pour ${name}. Id√©al pour la prot√©ger du soleil ou compl√©ter son look avec style.`;
          }
          
          // Tech et gadgets
          if (lowerTitle.includes('√©couteurs') || lowerTitle.includes('casque') || lowerTitle.includes('audio')) {
            return `Un √©quipement audio de qualit√© pour ${name}. Parfait pour profiter de sa musique pr√©f√©r√©e avec un son cristallin.`;
          }
          
          if (lowerTitle.includes('montre') || lowerTitle.includes('bracelet') && lowerTitle.includes('connect')) {
            return `Un accessoire connect√© moderne pour ${name}. Alliant style et technologie pour l'accompagner au quotidien.`;
          }
          
          // Cuisine et maison
          if (lowerTitle.includes('couteau') || lowerTitle.includes('ustensile') || lowerTitle.includes('cuisine')) {
            return `Un ustensile de cuisine pratique pour ${name}. Id√©al pour pr√©parer de d√©licieux repas avec facilit√© et plaisir.`;
          }
          
          if (lowerTitle.includes('planche') && lowerTitle.includes('d√©couper')) {
            return `Une planche √† d√©couper de qualit√© pour ${name}. Un accessoire indispensable pour une cuisine bien √©quip√©e.`;
          }
          
          // Livres et culture
          if (lowerTitle.includes('livre') || lowerTitle.includes('roman') || lowerTitle.includes('guide')) {
            return `Une lecture captivante pour ${name}. Ce livre saura l'enrichir et lui offrir de beaux moments de d√©tente.`;
          }
          
          // PRIORIT√â 3: Correspondance avec les centres d'int√©r√™t
          const matchingInterests = interests.filter((interest: string) => 
            lowerTitle.includes(interest.toLowerCase()) || 
            interest.toLowerCase().includes(lowerTitle.split(' ')[0]) ||
            (interest.toLowerCase() === 'sport' && (lowerTitle.includes('fitness') || lowerTitle.includes('exercice'))) ||
            (interest.toLowerCase() === 'voyage' && (lowerTitle.includes('sac') || lowerTitle.includes('bagage'))) ||
            (interest.toLowerCase() === 'lecture' && lowerTitle.includes('livre'))
          );
          
          if (matchingInterests.length > 0) {
            const interest = matchingInterests[0];
            return `Un produit soigneusement choisi pour ${name} qui partage sa passion pour ${interest.toLowerCase()}. Ce cadeau correspond parfaitement √† ses go√ªts et √† son style de vie.`;
          }
          
          // PRIORIT√â 4: Extraction d'informations sp√©cifiques du titre
          // √âviter les descriptions g√©n√©riques sur la marque, se concentrer sur la fonction
          const isSet = lowerTitle.includes('set') || lowerTitle.includes('kit') || lowerTitle.includes('lot de');
          const hasNumber = /\d+/.test(title);
          
          if (isSet && hasNumber) {
            const numbers = title.match(/\d+/g);
            const quantity = numbers ? numbers[0] : '';
            return `Un ensemble complet de ${quantity} pi√®ces pour ${name}. Ce set lui offrira tout le n√©cessaire pour une exp√©rience riche et vari√©e.`;
          }
          
          // PRIORIT√â 5: Fallback bas√© sur l'√©v√©nement - √âVITER les descriptions g√©n√©riques
          if (eventType === 'birthday') {
            // Extraire le type de produit du titre plut√¥t que la marque
            const productKeywords = [
              'accessoire', '√©quipement', 'produit', 'article', 'objet', 
              'cadeau', 'ensemble', 'collection', 'kit', 'set'
            ];
            
            let productType = 'cadeau';
            for (const keyword of productKeywords) {
              if (lowerTitle.includes(keyword)) {
                productType = keyword;
                break;
              }
            }
            
            return `Un ${productType} unique et pratique pour l'anniversaire de ${name}. Choisi avec attention pour correspondre √† ses go√ªts et besoins du quotidien.`;
          }
          
          // DERNIER RECOURS: Description contextuelle minimale
          return `Un produit de qualit√© s√©lectionn√© pour ${name}. Ce cadeau saura lui apporter satisfaction gr√¢ce √† son utilit√© et son design soign√©.`;
        };
        
        // Fonction am√©lior√©e de r√©solution des liens Amazon uniquement depuis le pool
        const resolveAmazonLinksFromPool = async (asin: string, byAsin: Map<string, any>, title: string) => {
          const product = byAsin.get(toAsin(asin));
          
          // 1) Si on a un lien source d√©j√† en /dp/, on le garde
          let base = product?.link && product.link.includes('/dp/') ? product.link : null;
          
          // 2) Sinon on forge /dp/{asin} SEULEMENT si le produit est dans byAsin (ASIN valid√©)
          if (!base && product && isValidAsin(asin)) {
            base = `https://www.amazon.fr/dp/${toAsin(asin)}`;
          }
          
          // 3) V√©rification optionnelle c√¥t√© serveur
          if (VERIFY_DP && base) {
            const ok = await dpLooksValid(base);
            if (!ok) {
              console.log(`‚ö†Ô∏è Lien DP invalide d√©tect√©: ${base} ‚Üí fallback search`);
              base = null; // On jette le dp douteux ‚Üí fallback search
            }
          }
          
          // 4) Fallback recherche si jamais
          const encodedTitle = encodeURIComponent(title.replace(/[^\w\s-]/g, ' ').trim());
          const search = `https://www.amazon.fr/s?k=${encodedTitle}`;
          
          console.log(`üîó R√©solution pour "${title}": pool=${!!product}, direct=${!!base}, ASIN=${asin}`);
          
          return { 
            primary: base || search, 
            search, 
            isDirectLink: !!base 
          };
        };

        const amazonLinks = await resolveAmazonLinksFromPool(suggestion.asin, byAsin, suggestion.title);
        
        finalSuggestions.push({
          title: suggestion.title,
          description: generateEnhancedDescription(suggestion.title, suggestion.reasoning, personData),
          estimatedPrice: suggestion.price,
          confidence: suggestion.confidence,
          reasoning: suggestion.reasoning || `Produit s√©lectionn√© pour ${personData.name} selon son profil.`,
          category: 'Cadeau personnalis√©',
          alternatives: [
            `Recherche pr√©cise: ${suggestion.title}`,
            `Recherche par marque: ${suggestion.title.split(' ')[0]}`
          ],
          purchaseLinks: [amazonLinks.primary],
          priceInfo: {
            displayPrice: suggestion.price,
            source: 'ai_estimate',
            originalEstimate: suggestion.price,
            amazonPrice: suggestion.price
          },
          amazonData: {
            asin: suggestion.asin,
            productUrl: withAffiliate(amazonLinks.primary),
            addToCartUrl: (partnerTagActive && isValidAsin(suggestion.asin))
              ? `https://www.amazon.fr/gp/aws/cart/add.html?ASIN.1=${suggestion.asin}&Quantity.1=1&tag=${partnerTag}`
              : null, // null si tag inactif
            searchUrl: withAffiliate(amazonLinks.search),
            matchType: amazonLinks.isDirectLink ? 'direct' : 'search'
          }
        });
      }
      suggestions = finalSuggestions;
      
      console.log('‚úÖ Converted selections to suggestions format');
      
      
    } catch (parseError) {
      console.error('‚ùå Error parsing OpenAI response:', parseError);
      console.error('‚ùå Parse error details:', (parseError as Error).message);
      return new Response(JSON.stringify({
        success: false,
        error: 'Erreur de parsing JSON (ne devrait pas arriver avec Structured Outputs)',
        details: (parseError as Error).message
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }

    // ‚úÖ Avec la nouvelle approche, les suggestions sont d√©j√† enrichies et valid√©es
    console.log('üí∞ Final budget validation for selected products...');
    
    const finalValidatedSuggestions = suggestions.filter((suggestion: any) => {
      if (suggestion.estimatedPrice > budget) {
        console.log(`‚ùå Final filter: removing "${suggestion.title}" - Price ${suggestion.estimatedPrice}‚Ç¨ exceeds budget ${budget}‚Ç¨`);
        return false;
      }
      return true;
    });
    
    console.log(`üéÅ Final suggestions after validation: ${finalValidatedSuggestions.length}`);
    
    // If no suggestions remain after budget filtering, return an error
    if (finalValidatedSuggestions.length === 0) {
      console.log('‚ùå No suggestions remain after budget filtering');
      return new Response(JSON.stringify({
        success: false,
        error: `Aucune suggestion trouv√©e dans le budget de ${budget}‚Ç¨. Essayez d'augmenter le budget ou de modifier les crit√®res.`
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }
    
    return new Response(JSON.stringify({
      success: true,
      suggestions: finalValidatedSuggestions,
      personName: personData.name,
      eventType,
      budget,
      budgetRespected: true
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('‚ùå ERROR in edge function:', error);
    console.error('Error name:', error?.name);
    console.error('Error message:', error?.message);
    console.error('Error stack:', error?.stack);
    
    return new Response(JSON.stringify({
      success: false,
      error: 'Erreur lors du traitement de la requ√™te',
      details: error?.message || 'Unknown error',
      timestamp: new Date().toISOString()
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' }
    });
  }
});

// Fonction de fallback simplifi√©e qui utilise les APIs ou g√©n√®re des suggestions g√©n√©riques
async function generateFallbackSuggestions(personData: any, eventType: string, budget: number) {
  const corsHeaders = {
    'Access-Control-Allow-Origin': '*',
    'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
  };

  console.log('üéØ G√©n√©ration fallback pour:', { 
    name: personData.name, 
    interests: personData.interests, 
    age: personData.age_years,
    budget 
  });

  // Essayer une derni√®re fois avec les APIs sur des requ√™tes tr√®s g√©n√©riques
  const serpApiKey = Deno.env.get('SERPAPI_API_KEY');
  const rainforestApiKey = Deno.env.get('RAINFOREST_API_KEY');
  
  if (serpApiKey || rainforestApiKey) {
    console.log('üîÑ Tentative fallback avec APIs externes...');
    
    // Cr√©er des requ√™tes tr√®s simples bas√©es sur les int√©r√™ts
    const interests = personData.interests || [];
    const fallbackQueries = [];
    
    if (interests.includes('Sport')) fallbackQueries.push('cadeau sport');
    if (interests.includes('Tech')) fallbackQueries.push('gadget tech');
    if (interests.includes('Cuisine')) fallbackQueries.push('accessoire cuisine');
    if (interests.includes('Lecture')) fallbackQueries.push('livre cadeau');
    
    // Queries g√©n√©riques si pas d'int√©r√™ts
    if (fallbackQueries.length === 0) {
      fallbackQueries.push('cadeau original', 'id√©e cadeau', 'accessoire pratique');
    }
    
    const minPrice = Math.round(budget * 0.4);
    const maxPrice = budget;
    
    let allProducts: any[] = [];
    
    // Essayer quelques requ√™tes simples
    for (const query of fallbackQueries.slice(0, 2)) {
      try {
        const products = await searchAmazonProducts(query, serpApiKey, minPrice, maxPrice, rainforestApiKey);
        allProducts.push(...products);
        
        if (allProducts.length >= 3) break; // On s'arr√™te si on a assez de produits
      } catch (error) {
        console.warn(`‚ö†Ô∏è Fallback query "${query}" failed:`, error);
      }
    }
    
    // Si on a trouv√© des produits via les APIs, les retourner
    if (allProducts.length > 0) {
      console.log(`‚úÖ Fallback API a trouv√© ${allProducts.length} produits`);
      
      const selectedProducts = diversifyProducts(allProducts, 3);
      const suggestions = selectedProducts.map((product: any, index: number) => ({
        title: product.title,
        description: product.displayDescription || `${product.title.substring(0, 100)}...`,
        estimatedPrice: Math.round(product.price || (budget * 0.7)),
        confidence: 0.7 - (index * 0.1),
        reasoning: `Suggestion trouv√©e pour ${personData.name} correspondant √† ses int√©r√™ts.`,
        category: 'Suggestion API',
        alternatives: [`Recherche similaire: ${product.title.split(' ').slice(0, 2).join(' ')}`],
        purchaseLinks: [product.link],
        priceInfo: {
          displayPrice: Math.round(product.price || (budget * 0.7)),
          source: 'api_fallback',
          originalEstimate: Math.round(product.price || (budget * 0.7)),
          amazonPrice: product.price
        },
        amazonData: {
          asin: product.asin,
          productUrl: product.link,
          addToCartUrl: product.asin && isValidAsin(product.asin) ? 
            withAffiliate(`https://www.amazon.fr/gp/aws/cart/add.html?ASIN.1=${product.asin}&Quantity.1=1`) : null,
          searchUrl: product.searchUrl || withAffiliate(`https://www.amazon.fr/s?k=${encodeURIComponent(product.title)}`),
          matchType: product.asin && isValidAsin(product.asin) ? 'api_match' : 'search'
        }
      }));
      
      return new Response(JSON.stringify({
        success: true,
        suggestions,
        personName: personData.name,
        metadata: {
          totalSuggestions: suggestions.length,
          fallbackMode: true,
          reason: 'Suggestions trouv√©es via APIs en mode fallback'
        }
      }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      });
    }
  }
  
  // Si vraiment aucune API ne fonctionne, g√©n√©rer des suggestions g√©n√©riques mais intelligentes
  console.log('‚ö†Ô∏è Aucune API disponible - g√©n√©ration de suggestions sp√©cifiques bas√©es sur le profil');
  
  const interests = personData.interests || [];
  const age = personData.age_years || 30;
  const name = personData.name || 'cette personne';
  
  // Suggestions intelligentes bas√©es sur le profil et l'√©v√©nement
  const smartSuggestions = [];
  
  // Suggestions bas√©es sur les int√©r√™ts avec des titres sp√©cifiques
  if (interests.includes('Sport')) {
    smartSuggestions.push({
      title: age > 50 ? 'Tapis de Yoga ou Mat√©riel Fitness Doux' : '√âquipement Sport et Fitness',
      description: `Un √©quipement sportif adapt√© √† ${name}, parfait pour maintenir sa forme et sa sant√©.`,
      category: 'Sport & Fitness',
      keywords: 'tapis yoga accessoire sport fitness √©quipement'
    });
  }
  
  if (interests.includes('Tech')) {
    smartSuggestions.push({
      title: budget > 100 ? 'Gadget Tech Premium' : 'Accessoire High-Tech Pratique',
      description: `Un gadget technologique innovant qui facilitera le quotidien de ${name}.`,
      category: 'Technologie',
      keywords: 'accessoire tech gadget connect√© smartphone'
    });
  }
  
  if (interests.includes('Lecture')) {
    smartSuggestions.push({
      title: 'Livre Bestseller ou Accessoire Lecture',
      description: `Un livre captivant ou un accessoire pour am√©liorer l'exp√©rience de lecture de ${name}.`,
      category: 'Culture & Lecture',
      keywords: 'livre bestseller lampe lecture marque-page'
    });
  }
  
  if (interests.includes('Cuisine')) {
    smartSuggestions.push({
      title: budget > 80 ? 'Ustensile de Cuisine Professionnel' : 'Accessoire Cuisine Pratique',
      description: `Un ustensile de qualit√© pour enrichir les talents culinaires de ${name}.`,
      category: 'Cuisine & Gastronomie',
      keywords: 'ustensile cuisine couteau planche balance'
    });
  }
  
  if (interests.includes('Jardinage')) {
    smartSuggestions.push({
      title: 'Kit Jardinage ou Plante d\'Int√©rieur',
      description: `Des outils ou plantes pour nourrir la passion jardinage de ${name}.`,
      category: 'Jardinage & Nature',
      keywords: 'kit jardinage plante outils jardin'
    });
  }
  
  if (interests.includes('Art') || interests.includes('Artisanat')) {
    smartSuggestions.push({
      title: 'Kit Cr√©atif ou Mat√©riel Artistique',
      description: `Du mat√©riel artistique de qualit√© pour exprimer la cr√©ativit√© de ${name}.`,
      category: 'Art & Cr√©ativit√©',
      keywords: 'kit cr√©atif pinceaux carnet art'
    });
  }
  
  // Suggestions bas√©es sur l'√¢ge si pas assez d'int√©r√™ts
  if (smartSuggestions.length < 2) {
    if (age > 60) {
      smartSuggestions.push({
        title: 'Produit Bien-√™tre et Confort',
        description: `Un produit pens√© pour le confort et le bien-√™tre de ${name}.`,
        category: 'Bien-√™tre',
        keywords: 'bien-√™tre confort relaxation senior'
      });
    } else if (age > 30) {
      smartSuggestions.push({
        title: 'Accessoire Maison et D√©coration',
        description: `Un objet √©l√©gant pour embellir l'int√©rieur de ${name}.`,
        category: 'Maison & D√©coration',
        keywords: 'd√©coration maison accessoire design'
      });
    } else {
      smartSuggestions.push({
        title: 'Cadeau Tendance et Moderne',
        description: `Un cadeau dans l'air du temps qui plaira √† ${name}.`,
        category: 'Tendance',
        keywords: 'cadeau moderne tendance jeune'
      });
    }
  }
  
  // Suggestions bas√©es sur l'√©v√©nement
  if (eventType === 'birthday') {
    smartSuggestions.push({
      title: `Cadeau d'Anniversaire Personnalis√©`,
      description: `Un cadeau sp√©cialement choisi pour c√©l√©brer l'anniversaire de ${name}.`,
      category: 'Anniversaire',
      keywords: 'cadeau anniversaire personnalis√© c√©l√©bration'
    });
  } else if (eventType === 'wedding') {
    smartSuggestions.push({
      title: 'Cadeau de Mariage √âl√©gant',
      description: `Un pr√©sent raffin√© pour c√©l√©brer cette occasion sp√©ciale avec ${name}.`,
      category: 'Mariage',
      keywords: 'cadeau mariage √©l√©gant d√©coration couple'
    });
  }
  
  // Compl√©ter avec des suggestions universelles si n√©cessaire
  if (smartSuggestions.length < 3) {
    const universalSuggestions = [
      {
        title: 'Coffret Cadeau Gourmand',
        description: `Une s√©lection de produits gourmands pour faire plaisir √† ${name}.`,
        category: 'Gastronomie',
        keywords: 'coffret gourmand produits terroir'
      },
      {
        title: 'Bougie Parfum√©e de Luxe',
        description: `Une bougie artisanale aux senteurs raffin√©es pour ${name}.`,
        category: 'Bien-√™tre',
        keywords: 'bougie parfum√©e luxe ambiance'
      },
      {
        title: 'Plante d\'Int√©rieur D√©corative',
        description: `Une belle plante pour apporter de la vie dans l'espace de ${name}.`,
        category: 'Nature',
        keywords: 'plante int√©rieur d√©corative nature'
      }
    ];
    
    smartSuggestions.push(...universalSuggestions.slice(0, 3 - smartSuggestions.length));
  }
  
  // Cr√©er les suggestions finales avec liens de recherche optimis√©s
  const finalSuggestions = smartSuggestions.slice(0, 3).map((suggestion, index) => {
    const targetPrice = Math.round(budget * (0.6 + Math.random() * 0.3)); // Entre 60% et 90% du budget
    const searchQuery = `${suggestion.keywords} cadeau -d√©guisement -costume`.replace(/[^\w\s-]/g, ' ').trim();
    const searchUrl = withAffiliate(`https://www.amazon.fr/s?k=${encodeURIComponent(searchQuery)}&rh=p_36%3A${Math.round(budget*0.3)}00-${budget}00`);
    
    return {
      title: suggestion.title,
      description: suggestion.description,
      estimatedPrice: targetPrice,
      confidence: 0.7 - (index * 0.1), // Confiance raisonnable car bas√© sur profil
      reasoning: `${suggestion.description} Cette suggestion est bas√©e sur le profil de ${name} et recherchera les meilleures options disponibles.`,
      category: suggestion.category,
      alternatives: [`Recherche optimis√©e: ${suggestion.keywords.split(' ').slice(0, 3).join(' ')}`],
      purchaseLinks: [searchUrl],
      priceInfo: {
        displayPrice: targetPrice,
        source: 'estimated',
        originalEstimate: targetPrice,
        amazonPrice: null
      },
      amazonData: {
        asin: null,
        productUrl: searchUrl,
        addToCartUrl: null,
        searchUrl: searchUrl,
        matchType: 'smart_search'
      }
    };
  });

  console.log('‚úÖ Suggestions intelligentes g√©n√©r√©es (mode fallback):', finalSuggestions.map(s => ({ 
    title: s.title, 
    price: s.estimatedPrice,
    category: s.category 
  })));

  return new Response(JSON.stringify({
    success: true,
    suggestions: finalSuggestions,
    personName: personData.name,
    metadata: {
      totalSuggestions: finalSuggestions.length,
      fallbackMode: true,
      reason: 'APIs indisponibles - suggestions intelligentes avec recherches optimis√©es'
    }
  }), {
    headers: { ...corsHeaders, 'Content-Type': 'application/json' }
  });
}