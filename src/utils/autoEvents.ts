import { Person, Event } from '@/types';

export interface AutoEventConfig {
  type: 'birthday' | 'work-anniversary' | 'custom';
  title: string;
  defaultBudget: number;
  description?: string;
}

// Configuration des √©v√©nements automatiques
const AUTO_EVENT_CONFIGS: Record<string, AutoEventConfig> = {
  birthday: {
    type: 'birthday',
    title: 'Anniversaire',
    defaultBudget: 50,
    description: 'Anniversaire annuel g√©n√©r√© automatiquement'
  }
};

/**
 * G√©n√®re la prochaine occurrence d'un anniversaire
 */
const getNextBirthday = (birthdayString: string): Date => {
  console.log(`üéÇ Calcul anniversaire pour: ${birthdayString}`);
  
  // Parsing de la date d'anniversaire
  const birthday = new Date(birthdayString);
  console.log(`Date d'origine pars√©e:`, birthday);
  
  const today = new Date();
  const currentYear = today.getFullYear();
  
  // Cr√©er la date d'anniversaire pour cette ann√©e
  const thisYearBirthday = new Date(currentYear, birthday.getMonth(), birthday.getDate());
  console.log(`Anniversaire cette ann√©e:`, thisYearBirthday);
  
  // Si l'anniversaire de cette ann√©e est pass√©, prendre celui de l'ann√©e prochaine
  if (thisYearBirthday < today) {
    const nextYear = new Date(currentYear + 1, birthday.getMonth(), birthday.getDate());
    console.log(`Anniversaire ann√©e prochaine:`, nextYear);
    return nextYear;
  }
  
  console.log(`Anniversaire retourn√©:`, thisYearBirthday);
  return thisYearBirthday;
};

/**
 * G√©n√®re des √©v√©nements automatiques pour une personne
 */
export const generateAutoEventsForPerson = (person: Person, existingEvents: Event[]): Event[] => {
  const autoEvents: Event[] = [];
  
  // G√©n√©ration d'√©v√©nement anniversaire
  if (person.birthday) {
    console.log(`üéÇ G√©n√©ration anniversaire pour ${person.name} (${person.birthday})`);
    
    const existingBirthdayEvent = existingEvents.find(
      event => event.personId === person.id && event.type === 'birthday'
    );
    
    console.log(`√âv√©nement anniversaire existant:`, existingBirthdayEvent ? 'OUI' : 'NON');
    
    // Si aucun √©v√©nement anniversaire n'existe, en cr√©er un
    if (!existingBirthdayEvent) {
      const nextBirthday = getNextBirthday(person.birthday);
      console.log(`Prochain anniversaire calcul√©:`, nextBirthday);
      
      const birthdayEvent: Event = {
        id: `auto-birthday-${person.id}-${nextBirthday.getFullYear()}`,
        title: `Anniversaire de ${person.name}`,
        person: person.name,
        personId: person.id,
        date: nextBirthday.toISOString().split('T')[0],
        type: 'birthday',
        budget: person.budget || AUTO_EVENT_CONFIGS.birthday.defaultBudget,
        description: `üéÇ √âv√©nement g√©n√©r√© automatiquement - ${getAge(person.birthday, nextBirthday)} ans`,
        status: 'upcoming',
        isAutoGenerated: true
      };
      
      console.log(`‚úÖ √âv√©nement anniversaire cr√©√©:`, birthdayEvent);
      autoEvents.push(birthdayEvent);
    }
  }
  
  return autoEvents;
};

/**
 * Calcule l'√¢ge √† une date donn√©e
 */
const getAge = (birthdayString: string, targetDate: Date): number => {
  const birthday = new Date(birthdayString);
  let age = targetDate.getFullYear() - birthday.getFullYear();
  const monthDiff = targetDate.getMonth() - birthday.getMonth();
  
  if (monthDiff < 0 || (monthDiff === 0 && targetDate.getDate() < birthday.getDate())) {
    age--;
  }
  
  return age;
};

/**
 * Met √† jour les √©v√©nements automatiques pour tous les profils
 */
export const updateAllAutoEvents = (persons: Person[], existingEvents: Event[]): Event[] => {
  const autoEvents: Event[] = [];
  
  persons.forEach(person => {
    const personAutoEvents = generateAutoEventsForPerson(person, existingEvents);
    autoEvents.push(...personAutoEvents);
  });
  
  return autoEvents;
};

/**
 * R√©g√©n√®re les √©v√©nements anniversaire pour l'ann√©e suivante
 */
export const regenerateYearlyEvents = (persons: Person[], existingEvents: Event[]): Event[] => {
  const newEvents: Event[] = [];
  const currentYear = new Date().getFullYear();
  
  persons.forEach(person => {
    if (person.birthday) {
      // Cr√©er l'√©v√©nement pour l'ann√©e prochaine si pas d√©j√† existant
      const nextYearEventId = `auto-birthday-${person.id}-${currentYear + 1}`;
      const nextYearExists = existingEvents.some(event => event.id === nextYearEventId);
      
      if (!nextYearExists) {
        const nextYearBirthday = new Date(currentYear + 1, new Date(person.birthday).getMonth(), new Date(person.birthday).getDate());
        
        const birthdayEvent: Event = {
          id: nextYearEventId,
          title: `Anniversaire de ${person.name}`,
          person: person.name,
          personId: person.id,
          date: nextYearBirthday.toISOString().split('T')[0],
          type: 'birthday',
          budget: person.budget || AUTO_EVENT_CONFIGS.birthday.defaultBudget,
          description: `üéÇ √âv√©nement g√©n√©r√© automatiquement - ${getAge(person.birthday, nextYearBirthday)} ans`,
          status: 'upcoming',
          isAutoGenerated: true
        };
        
        newEvents.push(birthdayEvent);
      }
    }
  });
  
  return newEvents;
};