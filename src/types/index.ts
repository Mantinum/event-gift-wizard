export interface Person {
  id: string;
  name: string;
  avatar?: string;
  interests: string[];
  budget: number;
  relationship: string;
  birthday: string;
  lastGift?: string;
  preferredCategories: string[];
  notes?: string;
  email?: string;  
  phone?: string;
  gender?: string;
  address?: string;
  // Nouveaux champs d'âge dérivés automatiquement
  ageYears?: number;
  ageMonths?: number;
  ageBucket?: 'infant' | 'toddler' | 'child' | 'teen' | 'adult';
  isMinor?: boolean;
  nextBirthday?: string;
  ageUpdatedAt?: string;
}

export interface Event {
  id: string;
  title: string;
  date: string;
  type: 'birthday' | 'wedding' | 'anniversary' | 'baptism' | 'christmas' | 'other';
  personId: string;
  person: string;
  budget: number;
  status: 'upcoming' | 'ordered' | 'completed' | 'cancelled';
  description?: string;
  location?: string;
  reminderDays?: number;
  isAutoGenerated?: boolean; // Indique si l'événement a été généré automatiquement
}

export interface UpcomingPurchase {
  id: string;
  personName: string;
  personId: string;
  eventTitle: string;
  eventId: string;
  daysUntil: number;
  budget: number;
  suggestedGift: string;
  confidence: number;
  status: 'pending' | 'reviewing' | 'approved' | 'ordered' | 'delivered';
  alternativeGifts?: string[];
  aiReasoning?: string;
}

export type EventType = Event['type'];
export type PurchaseStatus = UpcomingPurchase['status'];
export type EventStatus = Event['status'];

export const EVENT_TYPES: { value: EventType; label: string; color: string }[] = [
  { value: 'birthday', label: 'Anniversaire', color: 'bg-ocean-blue' },
  { value: 'wedding', label: 'Mariage', color: 'bg-purple-accent' },
  { value: 'anniversary', label: 'Anniversaire de mariage', color: 'bg-accent' },
  { value: 'baptism', label: 'Baptême', color: 'bg-success' },
  { value: 'christmas', label: 'Noël', color: 'bg-destructive' },
  { value: 'other', label: 'Autre', color: 'bg-muted' },
];

export const RELATIONSHIP_TYPES = [
  'Famille',
  'Ami(e) proche',
  'Collègue',
  'Voisin(e)',
  'Connaissance',
  'Partenaire',
  'Enfant',
  'Parent',
  'Frère/Sœur',
  'Cousin(e)',
  'Autre'
];

// Fonction pour obtenir la couleur d'un type de relation
export const getRelationshipColor = (relationship: string): string => {
  const colors: { [key: string]: string } = {
    'Famille': 'bg-blue-500 text-white',
    'Ami(e) proche': 'bg-green-500 text-white',
    'Collègue': 'bg-orange-500 text-white', 
    'Voisin(e)': 'bg-yellow-500 text-white',
    'Connaissance': 'bg-gray-500 text-white',
    'Partenaire': 'bg-pink-500 text-white',
    'Enfant': 'bg-purple-400 text-white',
    'Parent': 'bg-indigo-500 text-white',
    'Frère/Sœur': 'bg-cyan-500 text-white',
    'Cousin(e)': 'bg-teal-500 text-white',
    'Autre': 'bg-slate-500 text-white'
  };
  
  return colors[relationship] || 'bg-muted text-muted-foreground';
};

export const GENDER_OPTIONS = [
  'Homme',
  'Femme',
  'Non binaire',
  'Préfère ne pas dire'
];

export const INTEREST_CATEGORIES = [
  'Sport',
  'Lecture',
  'Cuisine',
  'Voyage',
  'Musique',
  'Art',
  'Tech',
  'Mode',
  'Jardinage',
  'Cinéma',
  'Photographie',
  'Bien-être',
  'Jeux',
  'Décoration',
  'Beauté',
  'Artisanat',
  'Science',
  'Histoire',
  'Nature'
];